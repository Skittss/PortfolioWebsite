{"version":3,"sources":["web/home/shaders/copyPass.js","web/home/home.jsx"],"names":["copyShader","uniforms","value","vertexShader","fragmentShader","Pass","useBreakpoint","Grid","extend","EffectComposer","ShaderPass","RenderPass","HomePage","useState","Clock","screens","className","gutter","xs","md","style","textAlign","preview","fallback","src","width","borderRadius","border","borderColor","verticalAlign","height","display","alignItems","justifyContent","fontSize","marginBottom","fontFamily","color","to","marginTop","wrap","flex","lineHeight","align","type","borderLeftWidth","marginLeft","marginRight","background","padding"],"mappings":"uRAGaA,EAAa,CAEtBC,SAAU,CACN,SAAY,CAAEC,MAAO,MACrB,WAAc,CAAEA,MAAO,GACvB,UAAa,CAAEA,MAAO,IAG1BC,aAAY,8KAOZC,eAAc,mqB,GA2BYC,I,iCC5BtBC,EAAkBC,IAAlBD,cACRE,YAAO,CAAEC,mBAAgBC,eAAYC,iBAkNtBC,UA5GE,WAAO,IAAD,EAEaC,mBAAS,GAFtB,gCAGOA,mBAAS,IAAIC,UAHpB,mBAIbC,GAJa,UAIHT,KAEhB,OAwBI,aAvBF,CAuBG,IAAD,UACA,qBAAKU,UAAU,cAAf,SACA,eAAC,IAAD,CAAKC,OAAQ,CAAC,GAAI,IAAlB,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,MAAO,CAACC,UAAWN,EAAQI,GAAK,QAAU,UAA/D,SACE,cAAC,IAAD,CACEG,SAAS,EACTC,SAAS,yBACTC,IAAI,iCACJC,MAAM,QACNL,MAAO,CAACM,aAAc,MAAOC,OAAQ,YAAaC,YAAa,kBAGnE,cAAC,IAAD,CAAKV,GAAI,GAAIC,GAAI,GAAIC,MAAO,CAACC,UAAWN,EAAQI,GAAK,OAAS,SAAUU,cAAed,EAAQI,GAAI,SAAW,OAA9G,SACE,qBAAKC,MAAO,CAACU,OAAQ,OAAQC,QAAS,OAAQC,WAAY,SAAUC,eAAgBlB,EAAQI,GAAK,OAAS,UAA1G,SACE,gCACE,mBAAGC,MAAO,CAACc,SAAU,GAAIC,aAAc,MAAOC,WAAY,8BAA1D,qCACA,oBAAGhB,MAAO,CAACe,aAAc,QAAzB,uBAA4C,sBAAMf,MAAO,CAACiB,MAAO,QAArB,mCAC5C,mBAAGjB,MAAO,CAACe,aAAc,OAAzB,uEACA,mBAAGf,MAAO,CAACe,aAAc,QAAzB,iDACA,oBAAGf,MAAO,CAACe,aAAc,OAAzB,mCAAuD,cAAC,IAAD,CAAMG,GAAG,YAAT,wBACvD,cAAC,IAAD,CAASlB,MAAO,CAACmB,UAAW,OAAQJ,aAAc,UAClD,8BACE,eAAC,IAAD,CAAKK,MAAM,EAAX,UACE,cAAC,IAAD,CAAKC,KAAM,EAAX,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACA,qBAAKrB,MAAO,CAACU,OAAQ,OAAQC,QAAS,OAAQC,WAAY,SAAUC,eAAgBlB,EAAQI,GAAK,OAAS,UAA1G,SACE,sBAAMC,MAAO,CAACc,SAAU,GAAIQ,WAAY,QAAxC,8BAGF,eAAC,IAAD,WACE,cAAC,IAAD,CAAKC,MAAM,SAAX,oCAGA,cAAC,IAAD,CAAKA,MAAM,SAAX,SACE,sBAAMvB,MAAO,CAACc,SAAU,GAAIG,MAAO,QAAnC,qDAKR,cAAC,IAAD,CAAKI,KAAK,OAAV,SACE,cAAC,IAAD,CAASG,KAAK,WAAWxB,MAAO,CAACU,OAAQ,OAAQe,gBAAiB,MAAOC,WAAY,OAAQC,YAAa,YAE5G,cAAC,IAAD,CAAKN,KAAM,EAAX,SACA,sBAAKrB,MAAO,CAACU,OAAQ,OAAQC,QAAS,OAAQC,WAAY,SAAUC,eAAgBlB,EAAQI,GAAK,OAAS,UAA1G,UACA,sBAAMC,MAAO,CAACiB,MAAO,UAArB,0BACA,uBAAMjB,MAAO,CAAC4B,WAAY,kBAAmBtB,aAAc,QAASuB,QAAS,kBAAmBb,WAAY,4BAA5G,sCAA2J,sBAAMpB,UAAU","file":"static/js/19.f1bafd85.chunk.js","sourcesContent":["import { ShaderMaterial, UniformsUtils } from 'three';\r\nimport { Pass, FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass';\r\n\r\nexport const copyShader = {\r\n\r\n    uniforms: {\r\n        'tDiffuse': { value: null },\r\n        'cameraNear': { value: 0 },\r\n        'cameraFar': { value: 0 }\r\n    },\r\n\r\n    vertexShader: /* glsl */`\r\n        varying vec2 vUv;\r\n        void main() {\r\n            vUv = uv;\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n        }`,\r\n\r\n    fragmentShader: /* glsl */`\r\n\r\n        #include <packing>\r\n\r\n        varying vec2 vUv;\r\n        uniform sampler2D tDiffuse;\r\n        uniform float cameraNear;\r\n        uniform float cameraFar;\r\n\r\n        \r\n        float readDepth( sampler2D depthSampler, vec2 coord ) {\r\n            float fragCoordZ = texture2D( depthSampler, coord ).x;\r\n            float viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\r\n            return viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\r\n        }\r\n\r\n        void main() {\r\n\r\n            float depth = readDepth(tDiffuse, vUv);\r\n\r\n            gl_FragColor.rgb = 1.0 - vec3( depth );\r\n            gl_FragColor.a = 1.0;\r\n\r\n        }`\r\n\r\n}\r\n\r\nexport class CopyPass extends Pass {\r\n\r\n    constructor ( dims ) {\r\n\r\n        super();\r\n\r\n        this.initCopyShader();\r\n\r\n    }\r\n\r\n    render( renderer, writeBuffer, readBuffer ) {\r\n\r\n        this.copyUniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\r\n        if ( this.renderToScreen ) { \r\n            \r\n            renderer.setRenderTarget(null);\r\n            this.copyFsQuad.render(renderer);\r\n\r\n        } else {\r\n\r\n            renderer.setRenderTarget(writeBuffer);\r\n            if (this.clear) renderer.clear();\r\n            this.copyFsQuad.render(renderer);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    initCopyShader() {\r\n\r\n        const cpyShader = copyShader;\r\n\r\n        this.copyUniforms = UniformsUtils.clone( cpyShader.uniforms );\r\n\r\n        this.copyMaterial = new ShaderMaterial({\r\n\r\n            uniforms: this.copyUniforms,\r\n            vertexShader: cpyShader.vertexShader,\r\n            fragmentShader: cpyShader.fragmentShader\r\n\r\n        })\r\n\r\n        this.copyFsQuad = new FullScreenQuad(this.copyMaterial);\r\n\r\n    }\r\n}","import React, { Suspense, useEffect, useState, useRef, useCallback , useMemo} from 'react';\r\nimport { Button, Image, Row, Col, Grid, Divider } from 'antd'\r\nimport { Canvas, useFrame, useThree, extend } from 'react-three-fiber';\r\nimport { DoubleSide, Clock, DepthTexture, LinearFilter, RGBFormat, WebGLRenderTarget, NearestFilter, UnsignedShortType } from 'three';\r\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei'\r\nimport { Link } from 'react-router-dom'\r\nimport { fragmentShader, vertexShader } from './bumpShader';\r\n\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { copyShader } from \"./shaders/copyPass\";\r\n\r\nimport FadeIn from 'react-fade-in';\r\nimport \"../../css/home.scss\";\r\nimport { HashLink } from 'react-router-hash-link';\r\n\r\nconst { useBreakpoint } = Grid\r\nextend({ EffectComposer, ShaderPass, RenderPass });\r\n\r\nconst Water = () => {\r\n\r\n  const composer = useRef();\r\n  const ref = useRef()\r\n  const { gl, size, scene, camera } = useThree();\r\n\r\n  const [ target ] = useMemo(() =>  {\r\n    const target = new WebGLRenderTarget(\r\n        window.innerWidth,\r\n        window.innerHeight,\r\n        {\r\n            minFilter: NearestFilter,\r\n            magFilter: NearestFilter,\r\n            format: RGBFormat,\r\n            generateMipmaps: false,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n            depthTexture: new DepthTexture(),\r\n            type: UnsignedShortType\r\n        }\r\n    );\r\n    return [ target ];\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n      composer.current.setSize(size.width, size.height)\r\n  }, [size])\r\n\r\n  useFrame((state) => {\r\n\r\n    state.gl.setRenderTarget(target);\r\n    state.gl.render(scene, camera);\r\n\r\n    if (ref.current) {\r\n      ref.current.uniforms['tDiffuse'].value = target.depthTexture;\r\n      ref.current.uniforms['cameraNear'].value = camera.near;\r\n      ref.current.uniforms['cameraFar'].value = camera.far;\r\n    }\r\n    composer.current.render()\r\n  }, 1);\r\n\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <shaderPass attachArray=\"passes\" ref={ref} args={[copyShader]} renderToScreen />\r\n    </effectComposer>\r\n  )\r\n}\r\n\r\nconst Terrain = ({noisePos, clock, callback}) => {\r\n\r\n  const uniforms = useMemo(() => ({\r\n    noisePos: { value: 0.0 },\r\n    bumpScale: { value: 100 },\r\n    zoom: { value: 4 },\r\n    opacity: { value: 0.0 }\r\n  }), [])\r\n\r\n\r\n  // const material = museRef()\r\n  // if (material.current) aterial.current.uniforms.noisePos.value = noisePos;\r\n\r\n  useFrame(state => {\r\n\r\n    let speed = 0.5\r\n    let threshold = 1.5\r\n    let delta = clock.getDelta()\r\n    uniforms.noisePos.value = noisePos + speed * delta\r\n    uniforms.opacity.value = Math.min(1, noisePos / threshold)\r\n    callback(previous => previous + speed * delta);\r\n    \r\n  })\r\n\r\n  return (\r\n    <mesh \r\n      position={[0, 0, 0]}\r\n      rotation={[-Math.PI / 2, 0, 0]}\r\n      scale={[1 / 256, 1 / 256, 1 / 256]}\r\n    >\r\n      <planeBufferGeometry attach=\"geometry\" args={[1024, 1024, 1024, 1024]}/>\r\n      <shaderMaterial\r\n        attach=\"material\"\r\n        uniforms={uniforms}\r\n        vertexShader={vertexShader}\r\n        fragmentShader={fragmentShader}\r\n        side={DoubleSide}\r\n      />\r\n      {/* <planeBufferGeometry attach=\"geometry\" args={[1024, 1024, 1024, 1024]}/>\r\n      <shaderMaterial\r\n        attach=\"material\"\r\n        uniforms={uniforms}\r\n        vertexShader={vertexShader}\r\n        fragmentShader={fragmentShader}\r\n        side={DoubleSide}\r\n      /> */}\r\n    </mesh>\r\n  )\r\n\r\n}\r\n\r\nconst HomePage = () => {\r\n\r\n    const [noisePos, setNoisePos] = useState(0)\r\n    const [clock, setClock] = useState(new Clock())\r\n    const screens = useBreakpoint();\r\n\r\n    return (\r\n      // <div className=\"fill-content\"> \r\n      //   <div style={{position: \"absolute\", top: 0, left: 0, height: \"100vh\", width: \"100vw\", backgroundColor: \"black\"}}/>\r\n      //   <Canvas\r\n      //     style={{position: \"absolute\", top: 0, left: 0, height: \"100vh\", width: \"100vw\"}}\r\n      //   >\r\n      //     <PerspectiveCamera\r\n      //       position={[0.05896666849764306, 1.0630507657317696, 0.9790701530639065]}\r\n      //       rotation={[-0.8264992153403403, 0.040778606785100945, 0.04423528266176858]}\r\n      //       near={0.01}\r\n      //       far={1000}\r\n      //       makeDefault\r\n      //     />\r\n      //     {/* <OrbitControls screenSpacePanning={false} /> */}\r\n      //     <color attach=\"background\" args={['#000']} />\r\n      //     <Suspense fallback>\r\n            \r\n      //       <Terrain noisePos={noisePos} clock={clock} callback={setNoisePos}/>\r\n      //       <ambientLight />\r\n      //     </Suspense>\r\n\r\n      //     {/* <Water /> */}\r\n\r\n      //   </Canvas>\r\n        <FadeIn>\r\n        <div className='padded-main'>\r\n        <Row gutter={[20, 16]}>\r\n          <Col xs={24} md={12} style={{textAlign: screens.md ? \"right\" : \"center\"}}>\r\n            <Image\r\n              preview={false} \r\n              fallback=\"Github profile picture\" \r\n              src=\"https://github.com/Skittss.png\" \r\n              width=\"300px\"\r\n              style={{borderRadius: \"50%\", border: \"solid 2px\", borderColor: \"whitesmoke\"}}\r\n            />\r\n          </Col>\r\n          <Col xs={24} md={12} style={{textAlign: screens.md ? \"left\" : \"center\", verticalAlign: screens.md? \"middle\" : \"top\"}}>\r\n            <div style={{height: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: screens.md ? \"left\" : \"center\"}}>\r\n              <div>\r\n                <p style={{fontSize: 30, marginBottom: \"5px\", fontFamily: \"'Raleway-Bold', sans-serif\"}}>Hey there! 👋</p>\r\n                <p style={{marginBottom: \"15px\"}}>I'm Henry <span style={{color: 'gray'}}>(Github - Skittss)</span></p>\r\n                <p style={{marginBottom: \"5px\"}}>I'm into Machine Learning, Computer Vision, and Graphics.</p>\r\n                <p style={{marginBottom: \"15px\"}}>I also like a little bit of WebDev!</p>\r\n                <p style={{marginBottom: \"5px\"}}>Check out my projects <Link to=\"/projects\"> here. </Link></p>\r\n                <Divider style={{marginTop: \"12px\", marginBottom: \"12px\"}} />\r\n                <div>\r\n                  <Row wrap={false}>\r\n                    <Col flex={1}>\r\n                      <Row>\r\n                        <Col>\r\n                        <div style={{height: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: screens.md ? \"left\" : \"center\"}}>\r\n                          <span style={{fontSize: 40, lineHeight: \"10px\"}}>🎓</span>\r\n                        </div>\r\n                        </Col>\r\n                        <Col>\r\n                          <Row align=\"middle\">\r\n                            The University of Bath\r\n                          </Row>\r\n                          <Row align=\"middle\">\r\n                            <span style={{fontSize: 10, color: 'gray'}}>BSc Computer Science (Year 3)</span>\r\n                          </Row>\r\n                        </Col>\r\n                      </Row>\r\n                    </Col>\r\n                    <Col flex=\"none\">\r\n                      <Divider type=\"vertical\" style={{height: \"100%\", borderLeftWidth: \"2px\", marginLeft: \"10px\", marginRight: \"10px\"}}/>\r\n                    </Col>\r\n                    <Col flex={1}>\r\n                    <div style={{height: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: screens.md ? \"left\" : \"center\"}}>\r\n                    <span style={{color: 'orange'}}>Status: &nbsp;</span>\r\n                    <span style={{background: \"rgba(0,0,0,0.5)\", borderRadius: \"0.4em\", padding: \"2px 5px 2px 5px\", fontFamily: \"'Roboto Mono', monospace\"}}>&gt; Graduating 😎<span className=\"animated-cursor\" /></span>\r\n                    </div>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n\r\n        </Row>\r\n\r\n        {/* <div className=\"title-card center-vertically\" style={{position: \"relative\", color: \"white\", margin: \"2em 1em\"}}>\r\n          <p style={{fontSize: \"2vw\", margin: \"0 2em\", padding: \"0 20px\", background: \"rgba(0,0,0,0.75)\"}}>\r\n            <span style={{color: \"#569cd6\"}}>const</span> <span style={{color: \"#fcfc9f\"}}>Info</span> = () <span style={{color: \"#569cd6\"}}>{\"=>\"}</span> {\"{\"}<span style={{color: \"#ce9178\"}}>{\"\\\"\"}</span>\r\n            <div style={{margin: \"0 2em\", color: \"#ce9178\"}}>\r\n                <br />\r\n                <span style={{color: \"#ce9178\"}}>I'm Henry, a computer science student studying at the University of Bath.</span>\r\n                <br />\r\n                I'm particularly interested in machine learning, computer vision, and graphics.\r\n                <br /><br />\r\n                You can find my projects <a href=\"https://skittss.github.io/PortfolioWebsite/#/projects\">here</a>.\r\n                <br /><br />\r\n            </div>\r\n            <span style={{color: \"#ce9178\"}}>{\"\\\"\"}</span>{\"};\"}<span className=\"animated-cursor\" />\r\n          </p>\r\n        </div> */}\r\n        </div>\r\n        </FadeIn>\r\n      // </div>\r\n    );\r\n}\r\n\r\nexport default HomePage"],"sourceRoot":""}