"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[717],{51717:(e,n,t)=>{t.r(n),t.d(n,{default:()=>he});var r=t(27565),i=t(73293),s=t(66804),a=t(15314),l=t(86399),o=t(28370),u=t.n(o),d=t(24186),m=t(20791),h=t(39432),c=t(40489),f=t(2225),g=t(45577),v=t(23013),x=t(57660),p=t(80345),y=t(88475),j=t(13975),S=t(4533),D=t(57292),w=t(27929);const{Dragger:U}=j.A,b=e=>{let{loading:n}=e;return n?(0,w.jsx)(p.A,{spin:!0}):(0,w.jsx)(D.A,{})},C=e=>{let{onLoadCallback:n,style:t}=e;const[i,s]=(0,r.useState)(!1);return(0,w.jsxs)(U,{style:t,name:"source-image",multiple:!1,listType:"picture-card",className:"src-img-uploader",showUploadList:!1,customRequest:async e=>{let{file:n,onSuccess:t}=e;new Promise((e=>{setTimeout((()=>{let t=URL.createObjectURL(n),r=new Image;r.onload=()=>{e({src:t,dim:{width:r.width,height:r.height}})},r.src=t}),30)})).then((e=>t(e)))},beforeUpload:e=>!("image/png"!==e.type&&"image/jpeg"!==e.type)||(S.Ay.error("Only PNG/JPEG files are supported."),!1),onChange:e=>{"uploading"===e.file.status?s(!0):"done"===e.file.status?(s(!1),n(e.file.response)):(s(!1),console.log(e.file.status))},children:[(0,w.jsx)("p",{className:"ant-upload-drag-icon",children:(0,w.jsx)(b,{loading:i})}),(0,w.jsx)("p",{className:"ant-upload-text",children:"Click or drag an image to this area to begin"}),(0,w.jsx)("p",{className:"ant-upload-hint",children:"(large images may take a long time to process)"})]})};var A=t(58040);const M=e=>{let{img:n,dim:t}=e;const r=(0,a.F)(A.TextureLoader,n);r.minFilter=A.LinearFilter;const[i,s]=function(e,n){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;const{viewport:r,aspect:i}=(0,a.A)(),s=n*(i>e/n?r.width/e:r.height/n);return[e*(i>e/n?r.width/e:r.height/n)*t,s*t,1]}(t.width,t.height);return(0,w.jsxs)("mesh",{scale:[i,s,1],children:[(0,w.jsx)("planeGeometry",{attach:"geometry"}),(0,w.jsx)("meshBasicMaterial",{attach:"material",map:r,depthTest:!1,toneMapped:!1})]})};var T=t(90955),F=t(69317),k=t(47897);const R={uniforms:{tDiffuse:{value:null},weights:{value:new A.Vector3}},vertexShader:"\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}",fragmentShader:"\n\t\tuniform float opacity;\n\t\tuniform sampler2D tDiffuse;\n        uniform vec3 weights;\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n            float w_a = weights.x * texel.x + weights.y * texel.y + weights.z * texel.z;\n\t\t\tgl_FragColor = vec4(w_a, w_a, w_a, 1.0);\n\t\t}"},_={uniforms:{tDiffuse:{value:null},kernelSize:{value:0},kernel:{value:new Array(128)},hRes:{value:0}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n        uniform float hRes;\n        uniform int kernelSize;\n        uniform float kernel[128];\n        uniform sampler2D tDiffuse;\n\n        varying vec2 vUv;\n\n        void main() {\n\n            vec4 color = texture2D(tDiffuse, vUv) * kernel[0];\n\n            for (int i=1; i < 128; i++) {\n                if (i == kernelSize) break;\n                color += texture2D(tDiffuse, vUv + vec2(float(i)/hRes, 0.0)) * kernel[i];\n                color += texture2D(tDiffuse, vUv - vec2(float(i)/hRes, 0.0)) * kernel[i];\n            }\n\n            gl_FragColor = color;\n        }"},V={uniforms:{tDiffuse:{value:null},kernelSize:{value:0},kernel:{value:new Array(128)},vRes:{value:0}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"            \n        uniform float vRes;\n        uniform int kernelSize;\n        uniform float kernel[128];\n        uniform sampler2D tDiffuse;\n        \n        varying vec2 vUv;\n\n        void main() {\n\n            vec4 color = texture2D(tDiffuse, vUv) * kernel[0];\n\n            for (int i=1; i < 128; i++) {\n                if (i == kernelSize) break;\n                color += texture2D(tDiffuse, vUv + vec2(0.0, float(i)/vRes)) * kernel[i];\n                color += texture2D(tDiffuse, vUv - vec2(0.0, float(i)/vRes)) * kernel[i];\n            }\n\n            gl_FragColor = color;\n        }"},G={uniforms:{tDiffuse:{value:null},dim:{value:new A.Vector2},GX:{value:new Array(9)},GY:{value:new Array(9)}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n\n        precision highp float;\n\n        uniform vec2 dim;\n        uniform float GX[9];\n        uniform float GY[9];\n        uniform sampler2D tDiffuse;\n\n        void main() {\n            \n            vec4 gx = vec4(0.0);\n            vec4 gy = vec4(0.0);\n            vec4 v;\n\n            for (int j=0; j<3; j++) {\n                for (int i=0; i<3; i++) {\n                    v = texture2D(tDiffuse, vec2(gl_FragCoord.x/dim.x, gl_FragCoord.y/dim.y) + vec2( float(i-1)/dim.x, float(j-1)/dim.y ) );\n                    gx += GX[j * 3 + i] * v;\n                    gy += GY[j * 3 + i] * v;\n                }\n            }\n\n            vec4 mag = sqrt(gx * gx + gy * gy);\n            float arg = atan(gy.x, gx.x);\n\n\n            gl_FragColor = vec4(mag.x, mag.y, mag.z, 1.0);\n        }"},P={uniforms:{tDiffuse:{value:null},max:{value:1}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n\n        precision highp float;\n\n        uniform sampler2D tDiffuse;\n        uniform float max;\n\n        varying vec2 vUv;\n\n        void main() {\n\n            float v = texture2D(tDiffuse, vUv).x;\n            float norm = v / max;\n\n            gl_FragColor = vec4(norm, norm, norm, 1.0);\n\n        }"},N={uniforms:{tDiffuse:{value:null},max:{value:1},high:{value:0},low:{value:0}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n\n        precision highp float;\n\n        uniform sampler2D tDiffuse;\n        uniform float max;\n        uniform float high;\n        uniform float low;\n\n        varying vec2 vUv;\n\n        void main() {\n\n            float v = texture2D(tDiffuse, vUv).x;\n\n            vec4 texel;\n            if (v <= low) {\n                texel = vec4(0.0, 0.0, 0.0, 1.0);\n            } else if (v < high) {\n                texel = vec4(0.3, 0.3, 0.3, 1.0);\n            } else {\n                texel = vec4(1.0);\n            }\n\n            gl_FragColor = texel;\n\n        }"},Q={uniforms:{tDiffuse:{value:null},dims:{value:new A.Vector2},tolerance:{value:1}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n\n        precision highp float;\n\n        uniform sampler2D tDiffuse;\n        uniform vec2 dims;\n        uniform int tolerance;\n\n        void main() {\n\n            float v = 0.0;\n            for (int j = -tolerance; j <= tolerance; j++) {\n                for (int i = -tolerance; i <= tolerance; i++) {\n                    \n                    vec2 coord = vec2(gl_FragCoord.x/dims.x, gl_FragCoord.y/dims.y) + vec2( float(i)/dims.x, float(j)/dims.y );\n\n                    if ( texture2D(tDiffuse, coord).x > 0.3) {\n\n                        v = 1.0;\n                        break;\n\n                    }\n\n                }\n            }\n\n            gl_FragColor = vec4(v, v, v, 1.0);\n\n        }"},B={uniforms:{tDilate:{value:null},tDiffuse:{value:null}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n\n        precision highp float;\n\n        uniform sampler2D tDilate;\n        uniform sampler2D tDiffuse;\n\n        varying vec2 vUv;\n\n        void main() {\n\n            float dilate = texture2D(tDilate, vUv).x;\n            float weak = texture2D(tDiffuse, vUv).x;\n\n            if (weak < 1.0 && weak > 0.0 && dilate > 0.3) {\n\n                weak = 1.0;\n\n            }\n\n            gl_FragColor = vec4(weak, weak, weak, 1.0);\n        }"},z={uniforms:{tDiffuse:{value:null},dims:{value:new A.Vector2}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n\n        precision highp float;\n\n        uniform sampler2D tDiffuse;\n        uniform vec2 dims;\n\n        void main() {\n\n            vec2 coord = vec2(gl_FragCoord.x/dims.x, gl_FragCoord.y/dims.y);\n\n            float v = texture2D(tDiffuse, coord).x;\n            if ( v <= 0.3 ) {\n                v = 0.0;\n            }\n\n            gl_FragColor = vec4(v, v, v, 1.0);\n\n        }"},L={uniforms:{tDiffuse:{value:null}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"\n\n        precision highp float;\n\n        uniform sampler2D tDiffuse;\n\n        varying vec2 vUv;\n\n        void main() {\n\n            gl_FragColor = texture2D(tDiffuse, vUv);\n\n        }"};class I extends k.o{constructor(e){super();const n=R;this.uniforms=A.UniformsUtils.clone(n.uniforms),this.material=new A.ShaderMaterial({uniforms:this.uniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader}),void 0!==e&&(this.uniforms.weights.value=e),this.fsQuad=new k.F(this.material)}render(e,n,t){this.uniforms.tDiffuse.value=t.texture,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(),this.fsQuad.render(e))}}const Y=I;class H extends k.o{constructor(e,n,t){super();const r=_;this.uniforms=A.UniformsUtils.clone(r.uniforms),this.material=new A.ShaderMaterial({uniforms:this.uniforms,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader}),void 0!==e&&(this.uniforms.kernel.value=e),void 0!==n&&(this.uniforms.kernelSize.value=n),void 0!==t&&(this.uniforms.hRes.value=t),this.fsQuad=new k.F(this.material)}render(e,n,t){this.uniforms.tDiffuse.value=t.texture,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(),this.fsQuad.render(e))}}const X=H;class E extends k.o{constructor(e,n,t){super();const r=V;this.uniforms=A.UniformsUtils.clone(r.uniforms),this.material=new A.ShaderMaterial({uniforms:this.uniforms,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader}),void 0!==e&&(this.uniforms.kernel.value=e),void 0!==n&&(this.uniforms.kernelSize.value=n),void 0!==t&&(this.uniforms.vRes.value=t),this.fsQuad=new k.F(this.material)}render(e,n,t){this.uniforms.tDiffuse.value=t.texture,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(),this.fsQuad.render(e))}}const O=E;class q extends k.o{constructor(e,n,t){super();const r=G;this.uniforms=A.UniformsUtils.clone(r.uniforms),this.material=new A.ShaderMaterial({uniforms:this.uniforms,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader}),void 0!==e&&(this.uniforms.GX.value=e),void 0!==n&&(this.uniforms.GY.value=n),void 0!==t&&(this.uniforms.dim.value=t),this.fsQuad=new k.F(this.material)}render(e,n,t){this.uniforms.tDiffuse.value=t.texture,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(),this.fsQuad.render(e))}}const W=q;class J extends k.o{constructor(e,n,t,r,i){super(),this.doNMS=r,this.threshold=i,this.dims=t,this.gpuCompute=e.gpuCompute,this.magnitudeVariable=e.magnitudeVariable,this.magnitudeUniforms=e.magnitudeUniforms,this.argumentVariable=e.argumentVariable,this.argumentUniforms=e.argumentUniforms,r&&(this.nmsGpuCompute=n.nmsGpuCompute,this.nmsVariable=n.nmsVariable,this.nmsUniforms=n.nmsUniforms),this.initNormalizeShader(),i&&this.initThresholdShader()}render(e,n,t){let r;this.magnitudeUniforms.tDiffuse.value=t.texture,this.doNMS&&(this.argumentUniforms.tDiffuse.value=t.texture),this.gpuCompute.compute(),this.doNMS?(this.nmsUniforms.tMags.value=this.gpuCompute.getCurrentRenderTarget(this.magnitudeVariable).texture,this.nmsUniforms.tArgs.value=this.gpuCompute.getCurrentRenderTarget(this.argumentVariable).texture,this.nmsUniforms.dim.value=this.dims,this.nmsGpuCompute.compute(),r=this.nmsGpuCompute.getCurrentRenderTarget(this.nmsVariable)):r=this.gpuCompute.getCurrentRenderTarget(this.magnitudeVariable);let i=new Float32Array(4*this.dims[0]*this.dims[1]);e.readRenderTargetPixels(r,0,0,this.dims[0],this.dims[1],i);let s=0;for(let a=0;a<i.length;a+=4)i[a]>s&&(s=i[a]);if(s>0&&(this.normUniforms.max.value=s),this.normUniforms.tDiffuse.value=r.texture,this.renderToScreen&&!this.threshold?(e.setRenderTarget(null),this.normFsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(),this.normFsQuad.render(e)),this.threshold){let r=this.threshold.high*s;this.threshUniforms.tDiffuse.value=t.texture,this.threshUniforms.max.value=s,this.threshUniforms.high.value=r,this.threshUniforms.low.value=this.threshold.low*r,this.renderToScreen?(e.setRenderTarget(null),this.threshFsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(),this.threshFsQuad.render(e))}}initNormalizeShader(){const e=P;this.normUniforms=A.UniformsUtils.clone(e.uniforms),this.normMaterial=new A.ShaderMaterial({uniforms:this.normUniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.normFsQuad=new k.F(this.normMaterial)}initThresholdShader(){const e=N;this.threshUniforms=A.UniformsUtils.clone(N.uniforms),this.threshMaterial=new A.ShaderMaterial({uniforms:this.threshUniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.threshFsQuad=new k.F(this.threshMaterial)}}const K=J;class Z extends k.o{constructor(e,n,t,r){super(),this.iterations=n,0==n&&this.initCopyShader(),this.initDilationShader(r,e),this.initHysteresisShader()}render(e,n,t){if(this.intermediateRt=n.clone(),0==this.iterations)this.copyUniforms.tDiffuse.value=t.texture,e.setRenderTarget(null),this.copyFsQuad.render(e);else{this.hysUniforms.tDiffuse.value=t.texture;for(let r=0;r<this.iterations;r++)this.uniforms.tDiffuse.value=0==r?t.texture:n.texture,e.setRenderTarget(this.intermediateRt),this.clear&&e.clear(),this.fsQuad.render(e),this.hysUniforms.tDilate.value=this.intermediateRt.texture,r==this.iterations-1&&this.renderToScreen?(e.setRenderTarget(null),this.hysFsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(),this.hysFsQuad.render(e))}this.intermediateRt.dispose(),delete this.intermediateRt}initCopyShader(){const e=L;this.copyUniforms=A.UniformsUtils.clone(e.uniforms),this.copyMaterial=new A.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.copyFsQuad=new k.F(this.copyMaterial)}initDilationShader(e,n){const t=Q;this.uniforms=A.UniformsUtils.clone(t.uniforms),this.material=new A.ShaderMaterial({uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader}),void 0!==e&&(this.uniforms.dims.value=e),void 0!==n&&(this.uniforms.tolerance.value=n),this.fsQuad=new k.F(this.material)}initHysteresisShader(){const e=B;this.hysUniforms=A.UniformsUtils.clone(e.uniforms),this.hysMaterial=new A.ShaderMaterial({uniforms:this.hysUniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.hysFsQuad=new k.F(this.hysMaterial)}}const $=Z;class ee extends k.o{constructor(e){super(),this.initCopyShader(),null!==e&&(this.copyUniforms.dims.value=e)}render(e,n,t){this.copyUniforms.tDiffuse.value=t.texture,this.renderToScreen?(e.setRenderTarget(null),this.copyFsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(),this.copyFsQuad.render(e))}initCopyShader(){const e=z;this.copyUniforms=A.UniformsUtils.clone(e.uniforms),this.copyMaterial=new A.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.copyFsQuad=new k.F(this.copyMaterial)}}const ne=ee;var te=t(31429);const re=e=>{let n=e.image.data;for(let t=0;t<n.length;t++)n[t]=0},ie=(e,n,t,r)=>{let i=new te.d(n[0],n[1],e),s=i.createTexture();re(s);let a,l,o=i.addVariable("textureMagnitude","\n    precision highp float;\n\n    uniform vec2 dim;\n    uniform float GX[9];\n    uniform float GY[9];\n    uniform sampler2D tDiffuse;\n\n    void main() {\n        \n        vec4 gx = vec4(0.0);\n        vec4 gy = vec4(0.0);\n        vec4 v;\n\n        for (int j=0; j<3; j++) {\n            for (int i=0; i<3; i++) {\n                v = texture2D(tDiffuse, vec2(gl_FragCoord.x/dim.x, gl_FragCoord.y/dim.y) + vec2( float(i-1)/dim.x, float(j-1)/dim.y ) );\n                gx += GX[j * 3 + i] * v;\n                gy += GY[j * 3 + i] * v;\n            }\n        }\n\n        vec4 mag = sqrt(gx * gx + gy * gy);\n        gl_FragColor = vec4(mag.x, mag.y, mag.z, 1.0);\n    }",s);r?(l=i.createTexture(),re(l),a=i.addVariable("textureArgument","\n    precision highp float;\n\n    uniform vec2 dim;\n    uniform float GX[9];\n    uniform float GY[9];\n    uniform sampler2D tDiffuse;\n\n    void main() {\n        \n        vec4 gx = vec4(0.0);\n        vec4 gy = vec4(0.0);\n        vec4 v;\n\n        for (int j=0; j<3; j++) {\n            for (int i=0; i<3; i++) {\n                v = texture2D(tDiffuse, vec2(gl_FragCoord.x/dim.x, gl_FragCoord.y/dim.y) + vec2( float(i-1)/dim.x, float(j-1)/dim.y ) );\n                gx += GX[j * 3 + i] * v;\n                gy += GY[j * 3 + i] * v;\n            }\n        }\n\n        vec4 mag = sqrt(gx * gx + gy * gy);\n        float arg = atan(gy.x, gx.x);\n\n        gl_FragColor = vec4(arg, arg, arg, arg);\n    }",l),i.setVariableDependencies(o,[a,o]),i.setVariableDependencies(a,[a,o])):i.setVariableDependencies(o,[o]);let u,d=o.material.uniforms;d.GX={value:t.gx},d.GY={value:t.gy},d.dim={value:n},d.tDiffuse={value:null},r&&(u=a.material.uniforms,u.GX={value:t.gx},u.GY={value:t.gy},u.dim={value:n},u.tDiffuse={value:null});const m=i.init();return null!==m?(console.error(m),null):{gpuCompute:i,magnitudeVariable:o,magnitudeUniforms:d,magnitudeUniforms:d,argumentVariable:a,argumentUniforms:u,texture:l,texture_2:s}},se=(e,n,t)=>{if(!t)return null;let r=new te.d(n[0],n[1],e),i=r.createTexture();re(i);let s=r.addVariable("textureNms","\n\n    uniform sampler2D tMags;\n    uniform sampler2D tArgs;\n    uniform vec2 dim;\n\n    void main() {\n        \n        vec2 current = vec2(gl_FragCoord.x/dim.x, gl_FragCoord.y/dim.y);\n\n        float m = texture2D(tMags, current).x;\n        float a = texture2D(tArgs, current).x;\n\n        float hComp = cos(a);\n        float vComp = sin(a);\n        float xTranslate = sign(hComp);\n        float yTranslate = sign(vComp);\n\n        vec2 translate = vec2(xTranslate/dim.x, yTranslate/dim.y);\n        vec2 a1 = current + translate;\n        vec2 a2 = current - translate;\n        float ag1 = texture2D(tMags, a1).x;\n        float ag2 = texture2D(tMags, a2).x;\n\n        vec2 b1, b2;\n        float bg1, bg2;\n\n        float g1, g2;\n\n        if (abs(hComp) > abs(vComp)) {\n            translate = vec2(xTranslate/dim.x, 0.0);\n            b1 = current + vec2(translate);\n            b2 = current - vec2(translate);\n            bg1 = texture2D(tMags, b1).x;\n            bg2 = texture2D(tMags, b2).x;\n            g1 = ag1 * abs(vComp) + (1.0-abs(vComp)) * bg1;\n            g2 = ag2 * abs(vComp) + (1.0-abs(vComp)) * bg2;\n        }\n        else {\n            translate = vec2(0.0, yTranslate/dim.y);\n            b1 = current + vec2(translate);\n            b2 = current - vec2(translate);\n            bg1 = texture2D(tMags, b1).x;\n            bg2 = texture2D(tMags, b2).x;\n            g1 = ag1 * abs(hComp) + (1.0-abs(hComp)) * bg1;\n            g2 = ag2 * abs(hComp) + (1.0-abs(hComp)) * bg2;\n        }\n\n        if (g1 > m || g2 > m) {\n            m = 0.0;\n        }\n\n        gl_FragColor = vec4(m, m, m, 1.0);\n\n    }",i);r.setVariableDependencies(s,[s]);let a=s.material.uniforms;a.dim={value:n},a.tMags={value:null},a.tArgs={value:null};const l=r.init();return null!==l?(console.error(l),null):{nmsGpuCompute:r,nmsVariable:s,nmsUniforms:a,textures:[i]}},ae=(e,n,t,r)=>({sobel:ie(e,n,t,r),nms:se(e,n,r)}),le=(e,n)=>{let t,r=0,i=[],s=1/(Math.sqrt(2*Math.PI)*n);for(let a=0;a<=e;a++)t=Math.exp(-Math.pow(a,2)/(2*Math.pow(n,2))),i[a]=s*t,r+=0===a?i[a]:2*i[a];for(let a=0;a<=e;a++)i[a]/=r;return i};(0,a.e)({EffectComposer:T.s,RenderPass:F.A,GrayscalePass:Y,HorizontalBlurPass:X,VerticalBlurPass:O,SobelPass:W,GpuComputePass:K,HysteresisPass:$,CopyStrongPass:ne});const{Option:oe}=d.A,ue={"BT.601":[.299,.587,.114],"BT.709":[.2126,.7152,.0722],"BT.2100":[.2627,.678,.0593],Mean:[.3333,.3333,.3333]},de={sobel:{gx:[1,0,-1,2,0,-2,1,0,-1],gy:[1,2,1,0,0,0,-1,-2,-1]},prewitt:{gx:[1,0,-1,1,0,-1,1,0,-1],gy:[1,1,1,0,0,0,-1,-1,-1]}},me=()=>{const[e,n]=(0,r.useState)(0),t=(0,r.useRef)(),[i,s]=(0,r.useState)({width:0,height:0}),[o,j]=(0,r.useState)(null),[S,D]=(0,r.useState)(null),[U,b]=(0,r.useState)(!0),[T,F]=(0,r.useState)(null),[k,R]=(0,r.useState)("BT.601"),[_,V]=(0,r.useState)(ue[k]),[G,P]=(0,r.useState)(3),[N,Q]=(0,r.useState)(1),[B,z]=(0,r.useState)("sobel"),[L,I]=(0,r.useState)(de[B]),[Y,H]=(0,r.useState)(.3),[X,E]=(0,r.useState)(.3),[O,q]=(0,r.useState)(1),[W,J]=(0,r.useState)(1),[K,Z]=(0,r.useState)(null),[$,ee]=(0,r.useState)(null),[ne,te]=(0,r.useState)(null),[re,ie]=(0,r.useState)(null),[se,me]=(0,r.useState)(null),[he,ce]=(0,r.useState)(!1),fe=e=>{S&&URL.revokeObjectURL(S),D(e)},ge=e=>0<=e&&e<7,ve={0:(0,w.jsx)(w.Fragment,{children:(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center",paddingBottom:"10px"},children:[(0,w.jsx)(h.A,{flex:"120px",children:"Encoding Type"}),(0,w.jsx)(h.A,{flex:"auto",children:(0,w.jsxs)(d.A,{defaultValue:k,onChange:e=>{R(e),V(ue[e])},children:[(0,w.jsx)(oe,{value:"BT.601",children:"BT.601"}),(0,w.jsx)(oe,{value:"BT.709",children:"BT.709"}),(0,w.jsx)(oe,{value:"BT.2100",children:"BT.2100"}),(0,w.jsx)(oe,{value:"Mean",children:"Mean"})]})})]})}),1:(0,w.jsxs)(w.Fragment,{children:[(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center",paddingBottom:"10px"},children:[(0,w.jsx)(h.A,{flex:"60px",children:"Radius"}),(0,w.jsx)(h.A,{flex:"auto",children:(0,w.jsx)(c.A,{value:G,onChange:e=>P(e),min:0,max:20})}),(0,w.jsx)(h.A,{flex:"100px",align:"right",children:(0,w.jsx)(f.A,{value:G,onChange:e=>P(e),min:0,max:20})})]}),(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center"},children:[(0,w.jsx)(h.A,{flex:"60px",children:"Sigma (\u03c3)"}),(0,w.jsx)(h.A,{flex:"auto",children:(0,w.jsx)(c.A,{defaultValue:N,onChange:e=>Q(e),min:.01,max:15,step:.01})}),(0,w.jsx)(h.A,{flex:"100px",align:"right",children:(0,w.jsx)(f.A,{value:N,onChange:e=>Q(e),min:0,max:20,step:.01})})]})]}),2:(0,w.jsx)(w.Fragment,{children:(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center",paddingBottom:"10px"},children:[(0,w.jsx)(h.A,{flex:"70px",children:"Operator"}),(0,w.jsx)(h.A,{flex:"auto",children:(0,w.jsxs)(d.A,{defaultValue:B,onChange:e=>{z(e),I(de[e])},children:[(0,w.jsx)(oe,{value:"sobel",children:"Sobel"}),(0,w.jsx)(oe,{value:"prewitt",children:"Prewitt"})]})})]})}),3:(0,w.jsx)("p",{children:(0,w.jsx)("i",{children:"(No options available)"})}),4:(0,w.jsxs)(w.Fragment,{children:[(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center",paddingBottom:"10px"},children:[(0,w.jsx)(h.A,{flex:"60px",children:"High"}),(0,w.jsx)(h.A,{flex:"auto",children:(0,w.jsx)(c.A,{value:X,onChange:e=>E(e),min:0,max:1,step:.01})}),(0,w.jsx)(h.A,{flex:"100px",align:"right",children:(0,w.jsx)(f.A,{value:X,onChange:e=>E(e),min:0,max:1,step:.01})})]}),(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center"},children:[(0,w.jsx)(h.A,{flex:"60px",children:"Low"}),(0,w.jsx)(h.A,{flex:"auto",children:(0,w.jsx)(c.A,{value:Y,onChange:e=>H(e),min:0,max:1,step:.01})}),(0,w.jsx)(h.A,{flex:"100px",align:"right",children:(0,w.jsx)(f.A,{value:Y,onChange:e=>H(e),min:0,max:1,step:.01})})]})]}),5:(0,w.jsxs)(w.Fragment,{children:[(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center",paddingBottom:"10px"},children:[(0,w.jsx)(h.A,{flex:"100px",children:"Tolerance (px)"}),(0,w.jsx)(h.A,{flex:"auto",children:(0,w.jsx)(c.A,{value:O,onChange:e=>q(e),min:0,max:5})}),(0,w.jsx)(h.A,{flex:"100px",align:"right",children:(0,w.jsx)(f.A,{value:O,onChange:e=>q(e),min:0,max:5})})]}),(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center"},children:[(0,w.jsx)(h.A,{flex:"100px",children:"Iterations"}),(0,w.jsx)(h.A,{flex:"auto",children:(0,w.jsx)(c.A,{value:W,onChange:e=>J(e),min:0,max:500})}),(0,w.jsx)(h.A,{flex:"100px",align:"right",children:(0,w.jsx)(f.A,{value:W,onChange:e=>J(e),min:0,max:500})})]})]})},xe=e=>{if(e){if(e.sobel){for(const[n,t]of Object.entries(e.sobel))t&&(t.dispose&&t.dispose(),delete e.sobel[n]);e.sobel=null}if(e.nms){for(const[n,t]of Object.entries(e.nms))t&&(t.dispose&&t.dispose(),delete e.nms[n]);e.nms=null}}},pe=(e,n)=>{let r=re,i={r:G,s:N};null==ne?(te(i),r=le(i.r,i.s),ie(r)):i.r==ne.r&&i.s==ne.s||(te(i),r=le(i.r,i.s),ie(r));const s=r,a=s.length;let l=K,o={gl:n,dims:[t.current.offsetWidth,t.current.offsetHeight],kernel:L,doNMS:e>2};return null==$&&(ee(o),l=ae(o.gl,o.dims,o.kernel,o.doNMS),Z(l)),null==T?F({tg:new A.WebGLRenderTarget(o.dims.x,o.dims.y)}):o.gl==$.gl&&o.dims[0]==$.dims[0]&&o.dims[1]==$.dims[1]&&o.kernel==$.kernel&&o.doNMS==$.doNMS||(ee(o),xe(l),l=ae(o.gl,o.dims,o.kernel,o.doNMS),Z(l),o.dims[0]==$.dims[0]&&o.dims[1]==$.dims[1]||(T.tg&&(T.tg.dispose&&T.tg.dispose(),delete T.tg),F({tg:new A.WebGLRenderTarget(o.dims.x,o.dims.y)}))),(0,w.jsxs)(w.Fragment,{children:[e>=0?(0,w.jsx)("grayscalePass",{attachArray:"passes",args:[_]}):null,e>=1?(0,w.jsxs)(w.Fragment,{children:[(0,w.jsx)("horizontalBlurPass",{attachArray:"passes",args:[s,a,t.current.offsetWidth]}),(0,w.jsx)("verticalBlurPass",{attachArray:"passes",args:[s,a,t.current.offsetHeight]})]}):null,2==e?(0,w.jsx)("gpuComputePass",{attachArray:"passes",args:[l.sobel,l.nms,o.dims,!1,null]}):null,3==e?(0,w.jsx)("gpuComputePass",{attachArray:"passes",args:[l.sobel,l.nms,o.dims,!0,null]}):null,e>=4?(0,w.jsx)("gpuComputePass",{attachArray:"passes",args:[l.sobel,l.nms,o.dims,!0,{high:X,low:Y}]}):null,e>=5?(0,w.jsx)("hysteresisPass",{attachArray:"passes",args:[O,W,T.tg,o.dims]}):null,e>=6?(0,w.jsx)("copyStrongPass",{attachArray:"passes",args:[o.dims]}):null]})},ye=()=>{const n=(0,r.useRef)(),{scene:t,gl:i,size:s,camera:l}=(0,a.A)();return i!=se&&me(i),(0,r.useEffect)((()=>n.current.render()),[]),(0,a.C)((()=>n.current.render()),1),(0,w.jsxs)("effectComposer",{ref:n,args:[i],children:[(0,w.jsx)("renderPass",{attachArray:"passes",scene:t,camera:l}),pe(e,i)]})};return(0,w.jsxs)("div",{className:"fill-container",children:[(0,w.jsx)(u(),{visible:U,children:(0,w.jsx)(C,{onLoadCallback:e=>{fe(e.src),j(e.dim),b(!1)},style:{display:function(){let{reverse:e=!1,value:n="block"}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e?U?"none":n:U?n:"none"}()}})}),null!=S&&null!=o?(0,w.jsxs)("div",{className:"fill-container",children:[(0,w.jsx)(u(),{className:"fill-and-vertically-center",children:(0,w.jsxs)(m.A,{gutter:[16,16],justify:"center",align:"middle",style:{display:"flex",alignItems:"center"},children:[(0,w.jsx)(h.A,{className:"process-preview-grid-col",flex:1,children:(0,w.jsx)("div",{className:"process-preview-container",children:(0,w.jsx)("div",{ref:t,children:(0,w.jsx)(g.A,{id:"preview-before",src:S,onLoad:()=>s({width:t.current.offsetWidth,height:t.current.offsetHeight})})})})}),(0,w.jsx)(h.A,{className:"process-preview-grid-col",flex:1,children:(0,w.jsx)("div",{className:"process-preview-container",children:(0,w.jsxs)(l.Hl,{className:"shader",camera:{fov:50,position:[0,0,30]},gl:{preserveDrawingBuffer:!0},style:{position:"relative",width:i.width,height:i.height},children:[(0,w.jsx)(r.Suspense,{fallback:"Loading...",children:(0,w.jsx)(M,{img:S,dim:{width:o.width,height:o.height}})}),(0,w.jsx)(ye,{})]})})}),(0,w.jsxs)(h.A,{className:"process-preview-grid-col",flex:1,style:{alignSelf:"stretch"},children:[(0,w.jsxs)(m.A,{style:{display:"flex",alignItems:"center",paddingBottom:"10px"},children:[(0,w.jsx)(h.A,{children:(0,w.jsx)(v.Ay,{onClick:()=>n((e=>e-1)),disabled:!ge(e-1),children:"Previous"})}),(0,w.jsx)(h.A,{flex:"auto",align:"center",children:(0,w.jsx)("h1",{id:"title",style:{display:"inline-block",alignSelf:"center"},children:(0,w.jsx)("b",{children:{0:"Grayscale Encoding",1:"Gaussian Blur",2:"Edgefinding Operation",3:"Non-maximum suppression",4:"Double Threshold",5:"Edge-Tracking (Hysteresis)",6:"Final Image"}[e]})})}),(0,w.jsx)(h.A,{align:"right",style:{paddingRight:"5px"},children:(0,w.jsx)(v.Ay,{onClick:()=>n((e=>e+1)),disabled:!ge(e+1),style:{float:"right"},children:"Next"})}),(0,w.jsx)(h.A,{align:"right",children:(0,w.jsx)(v.Ay,{type:"primary",onClick:async()=>{se&&(ce(!0),new Promise((e=>{setTimeout((()=>{let n=se.domElement.toDataURL();e(n)}),30)})).then((n=>{let t=document.createElement("a");t.download="Canny_Step_"+e,t.href=n,t.click(),ce(!1)})))},style:{float:"right"},children:he?(0,w.jsx)(x.A,{size:"middle",indicator:(0,w.jsx)(p.A,{spin:!0,style:{color:"white"}})}):"Save"})})]}),(e=>(0,w.jsx)("div",{className:"processor-options",children:ve[e]}))(e)]})]})}),(0,w.jsx)(u(),{className:"back-overlay",visible:!U,children:(0,w.jsxs)(v.Ay,{id:"button",type:"link",style:{fontSize:"15px"},onClick:()=>{xe(K),fe(null),j(null),b(!0)},children:[(0,w.jsx)(y.A,{}),"Change image"]})})]}):null]})},he=()=>{const[e,n]=(0,r.useState)(!1);return!1===e&&(i.Ay.open({message:"This project works best on a powerful machine!",description:(0,w.jsxs)("span",{children:["This page uses WebGL - a dedicated GPU is STRONGLY recommended.",(0,w.jsx)("br",{}),"Loading images which are too large or updating parameters too quickly ",(0,w.jsx)("i",{children:"may"})," cause the browser to run out of memory."]}),icon:(0,w.jsx)(s.A,{twoToneColor:"#FFA500"}),key:"performance-notif",style:{width:500}}),n(!0)),(0,w.jsx)("div",{className:"fill-container",children:me()})}}}]);
//# sourceMappingURL=717.a953911f.chunk.js.map